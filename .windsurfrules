{
  "assistant_rules": {
    "architecture": {
      "frontend": {
        "framework": "SvelteKit with Svelte 5",
        "svelte_version": {
          "version": 5,
          "key_features": [
            "Runes-based reactivity ($state, $derived, $effect, $props)",
            "Fine-grained reactivity model",
            "Universal component format",
            "Improved performance"
          ],
          "coding_patterns": [
            "Use $state() instead of let for reactive variables",
            "Use $derived() instead of $: for derived values",
            "Use $effect() for side effects instead of $: statements",
            "Use $props() for component props definition",
            "Prefer inline event handlers with () => syntax",
            "Use exported functions for component methods",
            "Avoid using lifecycle methods (onMount, etc.) when possible in favor of $effect()"
          ],
          "migration_considerations": [
            "Maintain consistent reactivity pattern throughout codebase",
            "Avoid mixing old reactivity system with runes",
            "Use new control flow syntax ({#if} becomes {if})",
            "Move away from REPL-style component format to universal component format",
            "Leverage snippets for reusable template pieces"
          ],
          "component_structure": [
            "Use universal component format (no separate <script> and <style> sections)",
            "Declare reactive state at component top level",
            "Place effects after state declarations",
            "Group related functionality together",
            "Export component API functions directly"
          ]
        },
        "patterns": [
          "Component-based architecture",
          "State management using Svelte 5 runes",
          "Progressive enhancement",
          "Responsive design patterns"
        ],
        "css_framework": {
          "primary": "Tailwind CSS",
          "patterns": [
            "Utility-first CSS approach",
            "Component-specific customizations",
            "Consistent design tokens",
            "Responsive utilities"
          ],
          "configuration": {
            "customization": {
              "colors": "Extend theme with brand colors",
              "spacing": "Use Tailwind's default spacing scale",
              "breakpoints": "Follow Tailwind's responsive design system"
            },
            "organization": [
              "Group related utilities with @apply when needed",
              "Keep utility classes in templates for better visibility",
              "Extract common patterns into components",
              "Use Tailwind's plugin system for custom utilities"
            ],
            "svelte_config": "Enable runes project-wide in svelte.config.js with: compilerOptions: { runes: true }",
            "common_issues": [
              "Projects started with earlier Svelte versions need configuration updates to use runes",
              "Imported values created with $state cannot be directly modified; use objects or proxies",
              "Explicit typing with $props() can be verbose but necessary for complex props",
              "Mixing old and new syntax can cause 'Unexpected token' errors"
            ],
            "shared_state": "For shared state, use objects: export const count = $state({ value: 0 }); and update with count.value++ rather than reassigning count"
          }
        },
        "design_system": {
          "tool": "UX Pilot AI",
          "workflow": [
            "AI-driven wireframing and prototyping",
            "High-fidelity design generation",
            "Screen flow automation",
            "Figma integration"
          ],
          "implementation": [
            "Generated code adaptation to SvelteKit with Svelte 5 syntax",
            "Component pattern consistency",
            "Design system adherence",
            "Accessibility standards"
          ],
          "ux_pilot_integration": {
            "process": [
              "Extract common elements from <head> section to app.html and app.css",
              "Extract color theme variables to app.css",
              "Configure Tailwind to use theme colors",
              "Create reusable layout components",
              "Convert screen-specific content to Svelte components"
            ],
            "code_extraction": {
              "initial_page": {
                "approach": "Use the complete HTML from the copy button",
                "purpose": "Establish foundation for the entire application",
                "steps": [
                  "Extract global elements for app.html (fonts, meta tags, etc.)",
                  "Extract global styles for app.css",
                  "Configure theme colors in tailwind.config.js",
                  "Convert page-specific content to SvelteKit component using Svelte 5 syntax"
                ]
              },
              "subsequent_pages": {
                "approach": "Copy only the visible code from the source code panel",
                "reasoning": [
                  "Panel shows only page-specific HTML needed for SvelteKit components",
                  "Avoids redundant head content and boilerplate already extracted"
                ],
                "steps": [
                  "Copy visible code from UX Pilot panel",
                  "Convert to SvelteKit component structure using Svelte 5 syntax",
                  "Apply Tailwind classes directly",
                  "Integrate with existing components (Header, Footer, etc.)",
                  "Wrap page content in a root div with appropriate Tailwind classes"
                ]
              }
            },
            "head_section_handling": {
              "fonts": "Move Google Fonts imports to app.html",
              "icons": "Move Font Awesome or other icon libraries to app.html",
              "global_styles": "Move global styles to app.css"
            },
            "color_management": {
              "approach": [
                "Extract CSS variables for colors to app.css",
                "Add brand colors to tailwind.config.js",
                "Use semantic color classes instead of hex values",
                "Support both light and dark themes"
              ],
              "implementation": [
                "For recurring brand colors, add to tailwind.config.js (e.g., facebook: { DEFAULT: '#3B5998', dark: '#2d4373' })",
                "For one-off colors, use Tailwind's bracket notation (e.g., text-[#3B5998])",
                "Maintain consistent color naming across components"
              ]
            },
            "component_conversion": {
              "steps": [
                "Remove HTML boilerplate and <head> content",
                "Keep only the main content section",
                "Replace hardcoded values with Svelte 5 reactive state ($state, $derived)",
                "Extract repeated elements into reusable components"
              ],
              "best_practices": [
                "Convert inline styles to Tailwind classes",
                "Use Svelte 5 universal component format",
                "Declare reactive state with $state() instead of let variables",
                "Use $effect() for side effects instead of lifecycle methods",
                "Use $derived() for computed values",
                "Download and store images locally instead of using external URLs"
              ]
            },
            "troubleshooting": [
              "Verify custom colors are defined in Tailwind config",
              "Check for missing container elements or structural differences",
              "Ensure all font and icon libraries are properly imported",
              "Convert vanilla JavaScript to Svelte 5's reactivity model",
              "Ensure correct use of Svelte 5 runes syntax"
            ]
          },
          "component_workflow": [
            "Generate atomic components via UX Pilot AI",
            "Implement using Tailwind utilities",
            "Structure as reusable Svelte 5 components",
            "Document component API and usage patterns"
          ],
          "component_organization": {
            "principles": [
              "Atomic design principles",
              "Feature-based grouping",
              "Shared component library",
              "Clear component interfaces"
            ],
            "structure": {
              "shared": {
                "purpose": "Reusable components across the application",
                "location": "frontend/src/lib/components/shared",
                "categories": [
                  "Basic UI elements (Button, Text, Link)",
                  "Common patterns (Card, Form)",
                  "Layout components (Grid, Stack)",
                  "Composite components (NavBar, Footer)"
                ],
                "naming": "Generic, purpose-describing names (Button.svelte)"
              },
              "pages": {
                "purpose": "Page-specific components and sections",
                "location": "frontend/src/lib/components/pages/{page-name}",
                "organization": {
                  "sections": {
                    "purpose": "Major page-specific assemblies",
                    "naming": "{PageName}{Purpose}Section.svelte",
                    "composition": "Combines shared and page-specific components"
                  },
                  "components": {
                    "purpose": "Components unique to page sections",
                    "location": "pages/{page-name}/components",
                    "naming": "Descriptive of specific use",
                    "scope": "Used only within page sections"
                  }
                }
              }
            },
            "styling": {
              "approach": "Utility-first with Tailwind CSS",
              "location": "Inline utility classes with component-specific styles using Svelte 5's styling approach",
              "patterns": [
                "Use Tailwind utilities for layout and styling",
                "Extract common patterns with @apply",
                "Define variants using dynamic classes",
                "Maintain responsive design with Tailwind breakpoints"
              ]
            }
          }
        }
      },
      "ai_system": {
        "framework": "@langchain/langgraph for JavaScript",
        "patterns": [
          "Agent orchestration patterns",
          "Conversation flow management",
          "Natural language processing integration",
          "Context management"
        ]
      },
      "infrastructure": {
        "platform": "AWS CDK",
        "considerations": [
          "Serverless architecture",
          "Scalability patterns",
          "Security best practices",
          "Cost optimization"
        ]
      }
    },
    "code_standards": {
      "style": {
        "language": "JavaScript",
        "patterns": [
          "Modern ES modules",
          "Async/await patterns",
          "Clean code principles",
          "Functional programming practices"
        ]
      },
      "documentation": {
        "required": [
          "JSDoc comments for all public APIs",
          "Component documentation",
          "Agent flow documentation",
          "Architecture decision records",
          "Design prompt patterns and outcomes",
          "UI generation workflows"
        ]
      },
      "testing": {
        "requirements": [
          "Unit tests for business logic",
          "Integration tests for AI flows",
          "E2E tests for critical paths",
          "Performance benchmarks",
          "Design system compliance checks"
        ]
      }
    }
  }
}